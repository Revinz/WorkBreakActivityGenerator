'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = generateApi;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _factoryCache = require('../factory/cache');

var _factoryCache2 = _interopRequireDefault(_factoryCache);

var _factoryProperty = require('../factory/property');

var _factoryProperty2 = _interopRequireDefault(_factoryProperty);

/**
 * Returns stubbed chrome api
 * @param {Object} config
 * @returns {Object}
 */

function generateApi(config) {
    return _lodash2['default'].reduce(config, function (result, _ref, namespace) {
        var methods = _ref.methods;
        var properties = _ref.properties;
        var events = _ref.events;

        appendNamespace(result, namespace);
        wrapEvents(result, namespace, events);
        wrapMethods(result, namespace, methods);
        wrapProperties(result, namespace, properties);
        return result;
    }, {});
}

/**
 * append namespace to chrome object
 * @param {Object} object
 * @param {String} namespace
 */
function appendNamespace(object, namespace) {
    _lodash2['default'].set(object, namespace, {});
}

/**
 * Append stub methods
 * @param {Object} object
 * @param {String} namespace
 * @param {Array<String>} methods
 */
function wrapMethods(object, namespace, methods) {
    methods.forEach(function (method) {
        Object.defineProperty(_lodash2['default'].get(object, namespace), method, {
            get: function get() {
                return _factoryCache2['default'].getStub(namespace, method);
            }
        });
    });
}

/**
 * Append stub getters/setters
 * @param {Object} object
 * @param {String} namespace
 * @param {Array<String>} properties
 */
function wrapProperties(object, namespace, properties) {
    _lodash2['default'].forEach(properties, function (property) {
        appendProperty(object, namespace, property);
    });
}

/**
 * Append property stub
 * @param {Object} object
 * @param {String} namespace
 * @param {String} property
 */
function appendProperty(object, namespace, property) {
    _lodash2['default'].set(object, namespace + '.' + property, null);
    _factoryProperty2['default'].cache(object, namespace, property);
}

/**
 * Append chrome events
 * @param {Object} object
 * @param {String} namespace
 * @param {Array<String>} events
 */
function wrapEvents(object, namespace, events) {
    events.forEach(function (event) {
        Object.defineProperty(_lodash2['default'].get(object, namespace), event, {
            get: function get() {
                return _factoryCache2['default'].getEvent(namespace, event);
            }
        });
    });
}
module.exports = exports['default'];